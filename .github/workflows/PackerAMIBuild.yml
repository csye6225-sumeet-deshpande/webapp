name: Build AMI after PR is merged

 
on:
  pull_request:
    branches:
      - main
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: 'postgres:latest'
        env:
          POSTGRES_DB: '${{ secrets.PGDATABASE }}'
          POSTGRES_USER: '${{ secrets.PGUSER }}'
          POSTGRES_PASSWORD: '${{ secrets.PGPASSWORD }}'
          POSTGRES_PORT: '${{ secrets.PGPORT }}'
          POSTGRES_HOST: '${{ secrets.PGHOST }}'
        ports:
          - '5432:5432'
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Create env file
        run: |

          touch .env

          echo PGDATABASE=${{ secrets.PGDATABASE }} >> .env

          echo PGUSER=${{ secrets.PGUSER }} >> .env

          echo PGPASSWORD=${{ secrets.PGPASSWORD }} >> .env

          echo PGPORT=${{ secrets.PGPORT }} >> .env

          echo PGHOST=${{ secrets.PGHOST }} >> .env

          echo CSVPATH=${{ secrets.CSVPATH }} >> .env

          echo "cat .env"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
      - name: Install Dependencies
        run: npm install
      - name: Run Integration Tests
        run: npm test


  build-ami:
    needs: build-and-test
    if: success()
    runs-on: ubuntu-latest

 

    steps:

      - name: Checkout code

        uses: actions/checkout@v2


      - name: Create env file
        run: |

          touch .env

          echo PGDATABASE=${{ secrets.PGDATABASE }} >> .env

          echo PGUSER=${{ secrets.PGUSER }} >> .env

          echo PGPASSWORD=${{ secrets.PGPASSWORD }} >> .env

          echo PGPORT=${{ secrets.PGPORT }} >> .env

          echo PGHOST=${{ secrets.PGHOST }} >> .env

          echo CSVPATH=${{ secrets.CSVPATH }} >> .env

          echo "cat .env"

          cat .env

          echo "ls -a ."

          ls -a .

          echo "ls -a ${{ github.workspace }}"

          ls -a ${{ github.workspace }}

      
      - name:  zip all the webapp files
        run: |
          zip -r webapp.zip ./
          pwd ./webapp
    

      - name: Install Packer

        run: |

          PACKER_VERSION="1.9.4"  

          wget https://releases.hashicorp.com/packer/${PACKER_VERSION}/packer_${PACKER_VERSION}_linux_amd64.zip

          unzip packer_${PACKER_VERSION}_linux_amd64.zip

          sudo mv packer /usr/local/bin/

          packer --version
          
      - name: Packer variables
        run: |
          touch ami.pkrvars.hcl
          echo aws_region=\"${{ vars.aws_region }}\" >> ami.pkrvars.hcl
          echo source_ami=\"${{ vars.source_ami }}\" >> ami.pkrvars.hcl
          echo ssh_username=\"${{ vars.ssh_username }}\" >> ami.pkrvars.hcl
          echo aws_profile=\"${{ vars.aws_profile }}\" >> ami.pkrvars.hcl
          echo instance_type=\"${{ vars.instance_type }}\" >> ami.pkrvars.hcl
          echo os_name=\"${{ vars.os_name }}\" >> ami.pkrvars.hcl
          echo os_root_type=\"${{ vars.os_root_type }}\" >> ami.pkrvars.hcl
          echo os_vr=\"${{ vars.os_vr }}\" >> ami.pkrvars.hcl
          echo dev_id=\"${{ vars.dev_id}}\" >> ami.pkrvars.hcl
          echo demo_id=\"${{ vars.demo_id}}\" >> ami.pkrvars.hcl
          echo AWS_ACCESS_KEY_ID=\"${{ vars.AWS_ACCESS_KEY_ID}}\" >> ami.pkrvars.hcl
          echo AWS_SECRET_ACCESS_KEY=\"${{ vars.AWS_SECRET_ACCESS_KEY}}\" >> ami.pkrvars.hcl


      - name: Initialize Packer

        run: packer init ami.pkr.hcl
      
      - name: check values
        run: |
             echo "${{ vars.AWS_ACCESS_KEY_ID }}"
             echo "${{ vars.AWS_SECRET_ACCESS_KEY}}"


 

      - name: Build AMI

        env:

          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

        run: packer build --var-file=ami.pkrvars.hcl ami.pkr.hcl

       - name: Configure AWS credentials for DEMO account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: us-east-1
      
       - name: Update AWS Launch Template Config and Refresh Instances
        run: |

          # Install jq to parse JSON data and map it to the shell variable
          sudo apt-get install jq

          ASG_NAME="asg_launch_config"
          LAUNCH_CONFIG="asg_launch_config"

          IMAGE=$(jq -r '.builds[-1].artifact_id' manifest.json | cut -d':' -f2)

          IMAGE_ID=$(jq -n \
            --arg img "$IMAGE" \
            '{"ImageId": $img}')

          aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_CONFIG" \
            --version-description updateAMI --source-version 1 \
            --launch-template-data="$IMAGE_ID"

          # Update Auto Scaling Group to use new Launch Configuration with the latest version
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $ASG_NAME \
            --launch-template LaunchTemplateName="$LAUNCH_CONFIG",Version='$Latest'

          # Start instance refresh
          aws autoscaling start-instance-refresh \
            --auto-scaling-group-name $ASG_NAME

          while true; do
            instance_refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name $ASG_NAME \
              --query "InstanceRefreshes[0].Status" --output text)
            if [ "$instance_refresh_status" = "Successful" ]; then
              echo "Instance refresh successful!"
              break
            fi
            if [ "$instance_refresh_status" = "Cancelling" ] || [ "$instance_refresh_status" = "Cancelled" ] || [ "$instance_refresh_status" = "Failed" ]; then
              echo "Instance refresh failed!"
              exit 1
            fi
            sleep 10
          done